	MIDTERM PRACTICE -- SAMPLE QUESTIONS -- YOUR MILEAGE MAY VARY		    CS5004 -- Silicon Valley -- Prof Mark________________________________________________________________________________RULES________________________________________________________________________________				       This is a proctored, in-person exam. You may use your laptop, the internet,Canvas, existing Piazza threads (but do not post during the exam!),materials from class, and your own notes. However, please do not copy andpaste code you have not written yourself, whether from a website or agenerative AI tool. It is fine to look up things such as the name of a Javabuiltin class or the syntax for calling a particular method, to jog yourmemory. Accessing your own solutions to previous assignments is also fine.Please do not discuss the contents of this exam with anyone except theinstructor or the TAs before, during, or after taking the exam. One or twoclarification questions may be asked quietly. It is essential to allow ATLEAST 10 MINUTES at the end to commit and push your files and upload the URLbefore the deadline. Late submissions will be severely penalized, sincelateness provides an unfair advantage relative to other students. Modifyingyour code after the deadline is not OK, even if Canvas received your URL ontime.________________________________________________________________________________INSTRUCTIONS________________________________________________________________________________Please download all of the provided files. Java src and test folders should beimported into IntelliJ. Use File -> New Project From Existing Sources. It isOK to ask a TA for help with this step. Most files are starter code requiringcompletion.There are three tasks, involving the creating of a ToDo list application. (Theactual Midterm will use different examples.)1. Implement the following unfinished code:    a. The compare method in UrgencyComparator.java    b. The compareTo method in ToDoItemAbs.java    c. sortByUrgency and sortByImportance in ToDoList    d. Only the indicated tests in ToDoItemSchoolTest.java    e. An equals method and hashCode method in ToDoItemSchool    f. Only the indicated Javadocs for ToDoItemAbs2. Find N bugs in ToDoItemPersonal.java. There may be more than N, but you   should report only N. IntelliJ yellow warnings do not count. Comment out   the line(s) with the bugs and add replacement lines to correct the bugs. If   you aren't sure or don't have time to fully correct a bug, use an inline   comment to describe the bug and your idea for fixing it. Partial credit can   be awarded even if you do not fully solve the problem// This is stub for a possible question about Class Diagrams3. Compare two provided Class Diagrams and answer a few question such as what the   differences imply. (An example might be with or without an Abstract Class.)________________________________________________________________________________Quiz (During Thursday Recitation)________________________________________________________________________________There will be a short, separate Quiz during next week's Recitation, using amultiple choice format. It should not take the entire session. Any remainingThursday recitation time should be used to discuss final project proposalswith your team and with the available instructional team members.Questions similar to the following will be answered using a multiple choiceformat. For example, for question 4 below, the choices might include:    A. Because the programmer made a mistake! (These should be declared private.)    B. Because certain subclasses need access to to them    C. Because declaring it final was not an option.Other examples of questions where you will choose answers from multiple choices:    1. What is the benefit of an abstract class in the ToDo example?    2. Why isn't there a toString method in the abstract class?    3. Why do ToDoItemsSchool and ToDoItemsPersonal invoke "super"?    4. Why are the instance variables in ToDoItemAbs protected? (see above)    5. Select the choice that correctly shows three key ideas of OOD with an       example for each.